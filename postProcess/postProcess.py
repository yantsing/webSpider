#!/usr/bin/env python
# encoding: utf-8
'''
postProcess.postProcess -- shortdesc

postProcess.postProcess is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2016 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import time


from optparse import OptionParser
from readSettings import ReadSettings
from calAutocorrelation import CalAutocorrelation

__all__ = []
__version__ = 0.1
__date__ = '2016-04-09'
__updated__ = '2016-04-09'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright 2016 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.txt", infile="./in.txt")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose > 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        # MAIN BODY #
        if len(args) == 0:
            print "no args"

        settings = ReadSettings();
        print settings.getWriteWebDir()
        print settings.getReadWebDir()
        
        
        if not os.path.exists(settings.getWriteWebDir()):
            print "Cannot find original crawled web directory."
            sys.exit(0)
         
        if not os.path.exists(settings.getReadWebDir()):
            print "Cannot find the directory where the frequency files with timestamp is located." 
            sys.exit(0) 

        if not os.path.exists(settings.getWordsFilePath()):
            print "Cannot find the words file." 
            sys.exit(0)
            
        if not os.path.exists(settings.getResultsDir()):
            print "Cannot find the result directory." 
            sys.exit(0)    
        
        if len(args) == 0:
            resultsFileName = settings.getResultsDir() + '/' + str(int(time.time()))
            print resultsFileName
            with open(resultsFileName, 'w+') as resultFile:
                print settings.getWordsFilePath()

                    
                with open(settings.getWordsFilePath(), 'r+') as f:
                    for line in f:
                        print line
                        resultFile.write(line)
                        resultFile.write('\r\n')
                        words = line.split(':')
                        wordA = words[0].strip()
                        wordB = words[0].strip()
                        autoCorr = CalAutocorrelation(settings.getWriteWebDir())
                        autoCorrelation, corrcoef, normA, normB = autoCorr.getAutocorrelation(wordA, wordA)
                        resultFile.write('Correlation coefficient is %4f' %  corrcoef)
                        resultFile.write('\r\n')
                        resultFile.write('The norms of the two words are %4f and %4f' % (normA, normB))
                        resultFile.write('\r\n')
                        resultFile.write('..........................................................')
                        
            
        
    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'postProcess.postProcess_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())